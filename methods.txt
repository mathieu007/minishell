Minishell Methods:

- readline(): Reads a line of text from standard input or a file descriptor, providing editing capabilities and history.
- rl_clear_history(): Clears the history list maintained by the readline library.
- rl_on_new_line(): Notifies the readline library that a new line has been started, typically after output has been printed to the terminal.
- rl_replace_line(): Replaces the current line of input with a new line.
- rl_redisplay(): Updates the terminal display to reflect changes made to the current line of input.
- add_history(): Adds a line of text to the history list maintained by the readline library.
- printf(): Prints formatted text to the standard output stream.
- malloc(): Allocates a block of memory on the heap.
- free(): Frees a block of memory previously allocated with malloc().
- write(): Writes data to a file descriptor.
- access(): Checks whether a file exists and whether the calling process has permission to access it.
- open(): Opens a file and returns a file descriptor.
- read(): Reads data from a file descriptor.
- close(): Closes a file descriptor.
- fork(): Creates a new process by duplicating the calling process.
- wait(): Waits for a child process to exit.
- waitpid(): Waits for a specific child process to exit.
- wait3(): Waits for a child process to exit and returns resource usage information.
- wait4(): Waits for a specific child process to exit and returns resource usage information.
- signal(): Installs a signal handler for a specified signal.
- sigaction(): Installs a signal handler for a specified signal with additional options.
- sigemptyset(): Initializes an empty signal set.
- sigaddset(): Adds a specified signal to a signal set.
- kill(): Sends a signal to a specified process.
- exit(): Terminates the calling process.
- getcwd(): Returns the current working directory.
- chdir(): Changes the current working directory.
- stat(): Gets file status information for a specified file.
- lstat(): Gets file status information for a specified symbolic link.
- fstat(): Gets file status information for a specified file descriptor.
- unlink(): Deletes a specified file.
- execve(): Replaces the current process image with a new process image.
- dup(): Duplicates a file descriptor.
- dup2(): Duplicates a file descriptor and sets it to a specified value.
- pipe(): Creates a pair of connected file descriptors for inter-process communication.
- opendir(): Opens a directory stream.
- readdir(): Reads a directory stream.
- closedir(): Closes a directory stream.
- strerror(): Returns a string describing the error code passed as a parameter.
- perror(): Prints a message describing the last error encountered during a system call.
- isatty(): Determines whether a file descriptor refers to a terminal.
- ttyname(): Returns the name of the terminal associated with a file descriptor.
- ttyslot(): Returns the index of the terminal type in the terminfo database.
- ioctl(): Performs various control operations on a file descriptor.
- getenv(): Returns the value of an environment variable.
- tcsetattr(): Sets terminal attributes.
- tcgetattr(): Gets terminal attributes.
- tgetent(): Loads a terminal capability database entry.
- tgetflag(): Returns the value of a boolean terminal capability.
- tgetnum(): Returns the value of a numeric terminal capability.
- tgetstr(): Returns the value of a string terminal capability.
- tgoto(): Generates a cursor movement string for a specified position.
- tputs(): Outputs a terminal capability string.